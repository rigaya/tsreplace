#!/bin/bash

#-----------------------------------------------------------------------------------------
#    tsreplace by rigaya
#  -----------------------------------------------------------------------------------------
#   ソースコードについて
#   ・無保証です。
#   ・本ソースコードを使用したことによるいかなる損害・トラブルについてrigayaは責任を負いません。
#   以上に了解して頂ける場合、本ソースコードの使用、複製、改変、再頒布を行って頂いて構いません。
#  -----------------------------------------------------------------------------------------

CNF_LOG=config.log

cnf_write()
{
    echo "$*"
    echo "$*" >> ${CNF_LOG}
}
cnf_print()
{
    printf "$*"
    echo "$*" >> ${CNF_LOG}
}

write_config_mak()
{
    echo $1
    echo $1 >> config.mak
}

write_enc_config()
{
    echo $1
    echo $1 >> app/rgy_config.h
}

write_app_rev()
{
    echo $1
    echo $1 >> app/rgy_rev.h
}

cxx_check()
{
    echo "" >> ${CNF_LOG}
    if [ -n "$1" ]; then
        printf "checking for $1..."
        echo "### - checking for $1... --------------" >> ${CNF_LOG}
    else 
        echo "### - test start --------------" >> ${CNF_LOG}
    fi
    echo "#include <iostream>" > cxx_check.c
    if [ -n "$3" ]; then
        echo "#include <$3>" >> cxx_check.c
    fi 
    if [ -n "$4" ]; then
        echo "extern \"C\" {" >> cxx_check.c
        echo "#include <$4>" >> cxx_check.c
        echo "}" >> cxx_check.c
    fi 
    echo "int main(void){ $5; std::cout << \"Hello World!\" << std::endl; return 0;}" >> cxx_check.c
    CXX_CMD="$CXX -w cxx_check.c $2 -o cxx_check"
    echo "------ command ------------" >> ${CNF_LOG}
    echo ${CXX_CMD} >> ${CNF_LOG}
    echo "------ test ---------------" >> ${CNF_LOG}
    cat cxx_check.c >> ${CNF_LOG}
    echo "---------------------------" >> ${CNF_LOG}
    $CXX_CMD 2>> ${CNF_LOG}
    #$CXX cxx_check.c $1 -o cxx_check
    ret=$?
    rm -f cxx_check*
    echo "### - test fin -> ${ret} ----------" >> ${CNF_LOG}
    return $ret
}

regex_check()
{
    echo "#include <iostream>" > cxx_check.c
    echo "#include <string>" >> cxx_check.c
    echo "#include <regex>" >> cxx_check.c
    echo "int main(void){ try { std::regex re(R\"(\d+)\"); std::string test(\"1234\"); return std::regex_match(test, re) ? 0 : 1; } catch (...) { return 1; } }" >> cxx_check.c
    $CXX cxx_check.c $1 -o cxx_check 2>/dev/null
    ret=$?
    if [ $ret -ne 0 ]; then
        rm -f cxx_check*
        return $ret
    fi
    ./cxx_check 2>/dev/null
    ret=$?
    rm -f cxx_check*
    return $ret
}

rm -f config.* .depend app/rgy_config.h app/rgy_rev.h

PKGCONFIG="pkg-config"
USE_PKGCONFIG=1

ENABLE_DEBUG=0
CC=${CC:-gcc}
CXX=${CXX:-g++}
LD=${LD:-g++}
PROGRAM=tsreplace
PREFIX=${PREFIX:-/usr/local}
EXTRACXXFLAGS=""
EXTRALDFLAGS=""
SRCS=""
X86_64=1
ARM64=0
NO_RDTSCP_INTRIN=0
ENABLE_LTO=0

ENABLE_CPP_REGEX=1

OPENCL_HEADERS=""

CHECK_LIBAV_NAMES="libswresample libavutil libavcodec libavformat libavfilter"
LIBAV_STATIC=0
LIBAV_CFLAGS=""
LIBAV_LIBS=""
ENABLE_AVSW_READER=1
AV_CHANNEL_LAYOUT_STRUCT_AVAIL=1
AV_FRAME_DURATION_AVAIL=1
AVCODEC_PAR_CODED_SIDE_DATA_AVAIL=1

ENABLE_AVISYNTH=0
ENABLE_VAPOURSYNTH=0
ENABLE_LIBASS=0
ENABLE_DTL=0

CPPCODEC_CFLAGS="-I./cppcodec"

print_help()
{
cat << EOF
Usage: ./configure [options]

options:
  -h, --help               print this message

  --prefix=PREFIX          install tsreplace into PREFIX/bin [${PREFIX}]

  --cxx=CXX                set C++ compiler path [${CXX}]
  --pkg-config=PKGCONFIG   set pkg-config path [${PKGCONFIG}]
  --enable-debug           compile in debug configuration [${ENABLE_DEBUG}]
  --enable-lto             compile with lto [${ENABLE_LTO}]
  
  --libav-static           set --static for pkg-config at libav check

  --extra-cxxflags=XCFLAGS add XCFLAGS to CXXFLAGS
  --extra-ldflags=XLDFLAGS add XLDFLAGS to LDFLAGS
EOF
}

SRCDIR=$(dirname "$0")
if [ "${SRCDIR}" == "`pwd`" ]; then
    SRCDIR=.
fi

for opt; do
    optarg="${opt#*=}"
    case "$opt" in
         -h)
            print_help
            exit 0
            ;;
         --help)
            print_help
            exit 0
            ;;
        --prefix=*)
            PREFIX="$optarg"
            ;;
        --cxx=*)
            CXX="$optarg"
            LD="$optarg"
            ;;
        --extra-cxxflags=*)
            EXTRACXXFLAGS="$optarg"
            ;;
        --extra-ldflags=*)
            EXTRALDFLAGS="$optarg"
            ;;
        --enable-debug)
            ENABLE_DEBUG=1
            ;;
        --enable-lto)
            ENABLE_LTO=1
            ;;
        --libav-static)
            LIBAV_STATIC=1
            ;;
        --pkg-config=*)
            PKGCONFIG="$optarg"
            ;;
        *)
            echo "unknown option $opt"
            exit 1
            ;;
    esac
done

## log
echo "" > ${CNF_LOG}
echo "CNF_LOG=${CNF_LOG}" >> ${CNF_LOG}
echo "PKGCONFIG=${PKGCONFIG}" >> ${CNF_LOG}
echo "USE_PKGCONFIG=${USE_PKGCONFIG}" >> ${CNF_LOG}
echo "ENABLE_DEBUG=${ENABLE_DEBUG}" >> ${CNF_LOG}
echo "CXX=${CXX}" >> ${CNF_LOG}
echo "PROGRAM=${PROGRAM}" >> ${CNF_LOG}
echo "PREFIX=${PREFIX}" >> ${CNF_LOG}
echo "EXTRACXXFLAGS=${EXTRACXXFLAGS}" >> ${CNF_LOG}
echo "EXTRALDFLAGS=${EXTRALDFLAGS}" >> ${CNF_LOG}
echo "X86_64=${X86_64}" >> ${CNF_LOG}
echo "ENABLE_CPP_REGEX=${ENABLE_CPP_REGEX}" >> ${CNF_LOG}
echo "CHECK_LIBAV_NAMES=${CHECK_LIBAV_NAMES}" >> ${CNF_LOG}
echo "ENABLE_AVSW_READER=${ENABLE_AVSW_READER}" >> ${CNF_LOG}

for file in "${CXX}" "${LD}"; do
    if [ ! `type -p $file 2> /dev/null` ]; then
        cnf_write $file not found
        exit 1
    fi
done

cnf_print "checking for ${CXX}..."
if ! cxx_check "" ; then
    cnf_write "${CXX} does not work"
    exit 1
fi
cnf_write "OK"

if [ `echo | ${CXX} -E -dM - | egrep "WIN32|WIN64" | wc --lines` -ne 0 ]; then
    cnf_write "This script does not support Windows platform."
    cnf_write "For Windows, use Visual Studio."
    exit 1 
fi

if [ `echo | ${CXX} -E -dM - | grep "__ARM_ARCH_ISA_A64" | wc --lines` -ne 0 ]; then
    ARM64=1
    X86_64=0
elif [ `echo | ${CXX} -E -dM - | grep "x86_64" | wc --lines` -ne 0 ]; then
    ARM64=0
    X86_64=1
else
    ARM64=0
    X86_64=0
fi

CFLAGS="-Wall -Wno-missing-braces -Wno-unknown-pragmas -Wno-unused \
-DLINUX -DUNIX -D_FILE_OFFSET_BITS=64 -D__USE_LARGEFILE64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS"
CXXFLAGS="-Wall -Wno-missing-braces -Wno-unknown-pragmas -Wno-unused \
-DLINUX -DUNIX -D_FILE_OFFSET_BITS=64 -D__USE_LARGEFILE64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS \
-I${SRCDIR} -I${SRCDIR}/app \
"
LDFLAGS="-L. -ldl -lm -lstdc++ -lstdc++fs"
if [ $ARM64 -ne 0 ]; then
    CXXINC="${CXXINC} -DLINUX64"
elif [ $X86_64 -ne 0 ]; then
    CXXINC="${CXXINC} -DLINUX64 -m64"
    LDFLAGS="${LDFLAGS} -m64"
else
    CXXINC="${CXXINC} -DLINUX32 -m32"
    LDFLAGS="${LDFLAGS} -m32"
fi

if cxx_check "pthread" "${CXXFLAGS} -pthread ${LDFLAGS} -lpthread" ; then
    CXXFLAGS="$CXXFLAGS -pthread"
    LDFLAGS="${LDFLAGS} -lpthread"
else
    cnf_write "pthread not installed." 
    exit 1
fi
cnf_write "OK"

if cxx_check "c++17" "${CXXFLAGS} -std=c++17 ${LDFLAGS}" ; then
    CXXFLAGS="$CXXFLAGS -std=c++17"
else
    cnf_write "${CXX} does not work with -std=c++17"
    exit 1
fi
cnf_write "OK"

if [ $X86_64 -ne 0 ]; then
    if ! cxx_check "__rdtscp()" "${CXXFLAGS} ${LDFLAGS}" "" "x86intrin.h" "unsigned int a = 0; auto i = __rdtscp(&a);" ; then
        CXXFLAGS="${CXXFLAGS} -DNO_RDTSCP_INTRIN=1"
        cnf_write "no"
    else
        cnf_write "yes"
    fi
fi

if [ ! $ENABLE_DEBUG -eq 0 ]; then
    cnf_write "configuring for debug..."
    CXXFLAGS="${CXXFLAGS} -O0 -g -D_DEBUG"
    CFLAGS="${CFLAGS} -O0 -g -D_DEBUG"
else
    cnf_write "configuring for speed..."
    CXXFLAGS="${CXXFLAGS} -O3 -DNDEBUG=1"
    CFLAGS="${CFLAGS} -O3 -DNDEBUG=1"
    if cxx_check "-mfpmath=sse" "${CXXFLAGS} -mfpmath=sse ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -mfpmath=sse"
    fi
    if cxx_check "-fPIE" "${CXXFLAGS} -fPIE ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -fPIE"
        CFLAGS="$CFLAGS -fPIE"
    fi
    if ${CXX} -dM -E -x c /dev/null | grep "__clang__" > /dev/null; then
        IS_CLANG=1
    else
        IS_CLANG=0
    fi
    if [ $IS_CLANG -eq 0 ]; then
        if cxx_check "-ffast-math" "${CXXFLAGS} -ffast-math ${LDFLAGS}" ; then
            CXXFLAGS="$CXXFLAGS -ffast-math"
        fi
    fi
    if cxx_check "-fomit-frame-pointer" "${CXXFLAGS} -fomit-frame-pointer ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
    fi
    LDFLAGS="$LDFLAGS -Wl,-s"

	if [ $ENABLE_LTO -ne 0 ]; then
		CXXFLAGS="$CXXFLAGS -flto"
		LDFLAGS="$LDFLAGS -flto"
	fi
fi

cnf_print "checking for pkg-config..."
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PREFIX/lib/pkgconfig
type -p $PKGCONFIG 2>/dev/null 1>/dev/null
if [ $? -ne 0 ]; then
    cnf_write "${PKGCONFIG} does not exist."
    USE_PKGCONFIG=0
fi
cnf_write "OK"

if [ -n "$EXTRACXXFLAGS" ]; then
    printf "checking --extra-cflags..."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LDFLAGS}" ; then
        cnf_write "--extra-cflags=${EXTRACXXFLAGS} does not work"
        exit 1
    fi
    cnf_write "OK"
fi

if [ -n "$EXTRALDFLAGS" ]; then
    if ! cxx_check "--extra-ldflags" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LDFLAGS} ${EXTRALDFLAGS}" ; then
        cnf_write "--extra-ldflags=${EXTRALDFLAGS} does not work"
        exit 1
    fi
    cnf_write "OK"
fi

if [ $ENABLE_AVSW_READER -ne 0 ]; then
    PKGCONFIG_LIBAV_STATIC=""
    if [ $LIBAV_STATIC -ne 0 ]; then
        PKGCONFIG_LIBAV_STATIC="--static"
    fi
    if [ $USE_PKGCONFIG -ne 0 ]; then
        printf "checking libavcodec with pkg-config..."
        if ! ${PKGCONFIG} --exists $CHECK_LIBAV_NAMES ; then
            cnf_write "libs could not be detected by ${PKGCONFIG}. [ PKG_CONFIG_PATH=${PKG_CONFIG_PATH} ]"
        else
            cnf_write "OK"
            LIBAV_LIBS=`${PKGCONFIG} --libs ${PKGCONFIG_LIBAV_STATIC} ${CHECK_LIBAV_NAMES}`
            LIBAV_CFLAGS=`${PKGCONFIG} --cflags ${PKGCONFIG_LIBAV_STATIC} ${CHECK_LIBAV_NAMES}`
        fi
    fi
    
    if [ -z "$LIBAV_LIBS" ]; then
        LIBAV_LIBS=""
        for lib in $CHECK_LIB_NAMES; do
            LIBAV_LIBS="${LIBAV_LIBS} -l${lib#lib}"
        done
        cnf_write "lib settings might be inaqurate."
    fi

    if ! cxx_check "libavutil" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavutil/avutil.h" "avutil_version();" ; then
        cnf_write "no"
        ENABLE_AVSW_READER=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "libavcodec" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavcodec/avcodec.h" "avcodec_find_decoder((AVCodecID)0);" ; then
        cnf_write "no"
        ENABLE_AVSW_READER=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "libavformat" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavformat/avformat.h" "avformat_find_stream_info(0,0);" ; then
        cnf_write "no"
        ENABLE_AVSW_READER=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "libavfilter" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavfilter/avfilter.h" "avfilter_version();" ; then
        cnf_write "no"
        ENABLE_AVSW_READER=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "libswresample" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libswresample/swresample.h" "swr_alloc();" ; then
        cnf_write "no"
        ENABLE_AVSW_READER=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "AVChannelLayout" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavutil/channel_layout.h" "AVChannelLayout ch_layout;" ; then
        cnf_write "no"
        AV_CHANNEL_LAYOUT_STRUCT_AVAIL=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "AVFrame::duration" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavutil/frame.h" "AVFrame *frame; frame->duration = 0;" ; then
        cnf_write "no"
        AV_FRAME_DURATION_AVAIL=0
    else
        cnf_write "yes"
    fi
    
    if ! cxx_check "AVCodecParameters::coded_side_data" "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavcodec/codec_par.h" "AVCodecParameters *codecpar; codecpar->coded_side_data = 0;" ; then
        cnf_write "no"
        AVCODEC_PAR_CODED_SIDE_DATA_AVAIL=0
    else
        cnf_write "yes"
    fi
    if [ $ENABLE_AVSW_READER -eq 0 ]; then
        cnf_write "libavutil, libavcodec, libavformat, libavfilter, libswresample are required to build tsreplace."
        exit 1
    fi
fi

SRC_APP=" \
cpu_info.cpp        gpu_info.cpp \
rgy_avlog.cpp       rgy_avutil.cpp \
rgy_bitstream.cpp   rgy_bitstream_aac.cpp rgy_codepage.cpp    rgy_def.cpp \
rgy_env.cpp         rgy_err.cpp         rgy_event.cpp \
rgy_filesystem.cpp  rgy_log.cpp         rgy_memmem.cpp \
rgy_pipe.cpp        rgy_pipe_linux.cpp \
rgy_simd.cpp        rgy_tsdemux.cpp \
rgy_tsstruct.cpp    rgy_tsutil.cpp      rgy_util.cpp \
rgy_version.cpp     tsreplace.cpp \
"

SRC_APP_X86="\
rgy_bitstream_avx2.cpp  rgy_bitstream_avx512bw.cpp \
rgy_memmem_avx2.cpp     rgy_memmem_avx512bw.cpp \
"

for src in $SRC_APP; do
    SRCS="$SRCS app/$src"
done

if [ $X86_64 -ne 0 ]; then
    for src in $SRC_APP_X86; do
        SRCS="$SRCS app/$src"
    done
fi

ENCODER_REV=`git rev-list HEAD | wc --lines`

cnf_write ""
cnf_write "Creating config.mak, rgy_config.h..."
echo "SRCS = $SRCS" >> config.mak
write_config_mak "SRCDIR = $SRCDIR"
write_config_mak "CC  = $CC"
write_config_mak "CXX = $CXX"
write_config_mak "LD  = $LD"
write_config_mak "PROGRAM = $PROGRAM"
write_config_mak "ENABLE_DEBUG = $ENABLE_DEBUG"
write_config_mak "CFLAGS = $CFLAGS"
write_config_mak "CXXFLAGS = $CXXFLAGS $EXTRACXXFLAGS $LIBAV_CFLAGS $VAPOURSYNTH_CFLAGS $AVISYNTH_CFLAGS $LIBASS_CFLAGS $DTL_CFLAGS $CPPCODEC_CFLAGS"
write_config_mak "LDFLAGS = $LDFLAGS $EXTRALDFLAGS $LIBAV_LIBS $LIBASS_LIBS"
write_config_mak "PREFIX = $PREFIX"
echo "X86_64 = ${X86_64}"
write_app_rev    "#define ENCODER_REV                  \"$ENCODER_REV\""
write_enc_config "#define ENABLE_RAW_READER             0"
write_enc_config "#define ENABLE_AVI_READER             0"
write_enc_config "#define ENABLE_AVISYNTH_READER        $ENABLE_AVISYNTH"
write_enc_config "#define ENABLE_VAPOURSYNTH_READER     $ENABLE_VAPOURSYNTH"
write_enc_config "#define ENABLE_AVSW_READER            $ENABLE_AVSW_READER" 
write_enc_config "#define ENABLE_SM_READER              0"
write_enc_config "#define ENABLE_CUSTOM_VPP             1"
write_enc_config "#define ENABLE_LIBASS_SUBBURN         $ENABLE_LIBASS"         
write_enc_config "#define ENABLE_ADVANCED_DEINTERLACE   0"
write_enc_config "#define ENABLE_MVC_ENCODING           0"
write_enc_config "#define ENABLE_FPS_CONVERSION         0"
write_enc_config "#define ENABLE_OPENCL                 1"
write_enc_config "#define ENABLE_SESSION_THREAD_CONFIG  0"
write_enc_config "#define ENABLE_AVCODEC_OUT_THREAD     1"
write_enc_config "#define AV_CHANNEL_LAYOUT_STRUCT_AVAIL $AV_CHANNEL_LAYOUT_STRUCT_AVAIL"
write_enc_config "#define AV_FRAME_DURATION_AVAIL        $AV_FRAME_DURATION_AVAIL"
write_enc_config "#define AVCODEC_PAR_CODED_SIDE_DATA_AVAIL $AVCODEC_PAR_CODED_SIDE_DATA_AVAIL"
write_enc_config "#define ENABLE_CPP_REGEX              $ENABLE_CPP_REGEX"
write_enc_config "#define ENABLE_DTL                    $ENABLE_DTL"

cnf_write "successfully generated config.mak, rgy_config.h"


